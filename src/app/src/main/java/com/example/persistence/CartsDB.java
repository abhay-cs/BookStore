package com.example.persistence;

import com.example.objects.Book;
import com.example.objects.Cart;
import com.example.objects.User;

import java.sql.Connection;
import java.sql.Driver;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

public class CartsDB
{
    private String dbPath;
    private String DBName = "appdb.db";
    private static String TAG = "CartsDB";
    private Connection conn;

    // Table Schema
    private static final String TABLE3 = "carts";
    private static final String CID = "id";
    private static final String BID = "book id";
    private static final String UID = "user id";
    private static final String CSTATUS = "status";

    public CartsDB(String dbPath)
    {
        this.dbPath = dbPath;
    }

    private boolean ConnectToCartsDB()
    {
        try
        {
            DriverManager.registerDriver((Driver) Class.forName("org.hsqldb.jdbcDriver").newInstance());
            conn = DriverManager.getConnection("jdbc:hsqldb:file:"  + dbPath + ";hsqldb.lock_file=false;shutdown=true", "SA", "");
        }
        catch (Exception e)
        {
            //Log.e(TAG, "Unable to connect. Error: " + e.getMessage());
            return false;
        }

        return true;
    }

    public boolean CreateSchema()
    {
        String dbSchema = "CREATE SCHEMA IF NOT EXISTS appschema";
        return ExecuteQuery(dbSchema);
    }

    private boolean tableExist(Connection conn, String tableName) throws SQLException
    {
        boolean tExists = false;
        try (ResultSet rs = conn.getMetaData().getTables(null, null, tableName, null)) {
            while (rs.next()) {
                String tName = rs.getString("TABLE_NAME");
                if (tName != null && tName.equals(tableName)) {
                    tExists = true;
                    break;
                }
            }
        }
        return tExists;
    }

    public boolean CreateDB()
    {
        if (!CreateSchema())
            return false;

        String createUsers = "CREATE TABLE " + TABLE3 + " (" + CID + " INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " + UID + " INTEGER, " + BID + " INTEGER, " + CSTATUS + " BOOLEAN)";

        if (ConnectToCartsDB()) {
            try {
                if (!tableExist(conn, TABLE3)) {
                    return ExecuteQuery(createUsers);
                }
                return true;
            } catch (Exception e) {
                System.out.println("DB Exist Check error: " + e.getMessage());
                return false;
            }
        }
        return ExecuteQuery(createUsers);
    }

    public boolean ExecuteQuery(String query)
    {
        if (ConnectToCartsDB())
        {
            try
            {
                Statement stmt = conn.createStatement();
                stmt.executeUpdate(query);
                stmt.close();
                conn.close();
            }
            catch (Exception e)
            {
                //Log.e(TAG, "Unable to execute query: " + query + ". Error: " + e.getMessage());
                return false;
            }

            return true;
        }

        return false;
    }

    public boolean InsertToCart(int bID, int uID)
    {
        String newCartItem = "INSERT INTO " + TABLE3 + " (" + uID + ", " + bID + ", " + true + ") VALUES (?, ?, ?, ?)";
        if (ConnectToCartsDB()) {
            try {
                PreparedStatement stmt = conn.prepareStatement(newCartItem);
                stmt.setInt(1, uID);
                stmt.setInt(2, bID);
                stmt.setBoolean(3, true);
                stmt.executeUpdate();
                stmt.close();
                conn.close();
            }
            catch (Exception e)
            {
                //Log.e(TAG, "Unable to insert data. Error: " + e.getMessage());
                return false;
            }
            return true;
        }
        return false;
    }

    public boolean ResetDB() {
        if (ConnectToCartsDB()) {
            try {
                if (tableExist(conn, TABLE3)) {
                    Statement stmt = conn.createStatement();
                    stmt.executeUpdate("DELETE FROM " + TABLE3);
                    stmt.close();
                    conn.close();
                }
            } catch (Exception e) {
                System.out.println("DB Reset error: " + e.getMessage());
                return false;
            }
        } else {
            return false;
        }

        return true;
    }

    public ArrayList<Integer> GetCartFromUser(int uID)
    {
        ArrayList<Integer> bookIDs = new ArrayList<Integer>();
        String getBooks = "SELECT * FROM carts;";

        if (ConnectToCartsDB())
        {
            try
            {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(getBooks);

                while (rs.next())
                {
                    if(rs.getInt(UID) == uID)
                    {
                        bookIDs.add(rs.getInt(BID));
                    }
                }

                stmt.close();

            } catch (Exception e) {
                //Log.e(TAG, "Unable to get users. Error: " + e.getMessage());
                return null;
            }
        }

        return bookIDs;
    }

}
