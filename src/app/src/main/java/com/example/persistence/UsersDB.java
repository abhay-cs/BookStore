
package com.example.persistence;

import com.example.loginform.BuildConfig;
import com.example.objects.Book;
import com.example.objects.User;
import java.sql.*;
import java.util.ArrayList;

public class UsersDB
{
    private String dbPath;
    private static String TAG = "UsersDB";
    private Connection conn;
    private static String DBName = "appdatabase.db";

    private static final String TABLE2 = "users";
    private static final String UID = "id";
    private static final String UFNAME = "firstname";
    private static final String ULNAME = "lastname";
    private static final String UEMAIL = "email";
    private static final String UPASSWORD = "password";

    public UsersDB(String dbPath)
    {
        this.dbPath = dbPath;
    }

    private boolean ConnectToUsersDB()
    {
        try
        {
            DriverManager.registerDriver((Driver) Class.forName("org.hsqldb.jdbcDriver").newInstance());
            conn = DriverManager.getConnection("jdbc:hsqldb:file:"  + dbPath + ";hsqldb.lock_file=false;shutdown=true", "SA", "");
        }
        catch (Exception e)
        {
            //Log.e(TAG, "Unable to connect. Error: " + e.getMessage());
            return false;
        }

        return true;
    }

    public boolean CreateSchema() {
        String dbSchema = "CREATE SCHEMA IF NOT EXISTS appschema";
        return ExecuteQuery(dbSchema);
    }

    private boolean tableExist(Connection conn, String tableName) throws SQLException {
        boolean tExists = false;
        try (ResultSet rs = conn.getMetaData().getTables(null, null, tableName, null)) {
            while (rs.next()) {
                String tName = rs.getString("TABLE_NAME");
                if (tName != null && tName.equals(tableName)) {
                    tExists = true;
                    break;
                }
            }
        }
        return tExists;
    }

    public boolean ResetDB() {
        if (ConnectToUsersDB()) {
            try {
                Statement stmt = conn.createStatement();
                stmt.executeUpdate("DELETE FROM " + TABLE2);
                stmt.close();
                conn.close();
            } catch (Exception e) {
                return false;
            }
        } else {
            return false;
        }

        return true;
    }

    // Creates a table if it does not exist
    public boolean CreateDB()
    {
        if (!CreateSchema())
            return false;

        String createUsers = "CREATE TABLE " + TABLE2 + " (" + UID + " INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " + UFNAME + " text, " + ULNAME + " VARCHAR(50), " + UEMAIL + " VARCHAR(50), " + UPASSWORD + " VARCHAR(50))";

        if (ConnectToUsersDB()) {
            try {
                if (!tableExist(conn, TABLE2)) {
                    return ExecuteQuery(createUsers);
                }
                return true;
            } catch (Exception e) {
                System.out.println("DB Exist Check error: " + e.getMessage());
                return false;
            }
        }
        return ExecuteQuery(createUsers);
    }

    public boolean ExecuteQuery(String query)
    {
        if (ConnectToUsersDB())
        {
            try
            {
                Statement stmt = conn.createStatement();
                stmt.executeUpdate(query);
                stmt.close();
                conn.close();
            }
            catch (Exception e)
            {
                //Log.e(TAG, "Unable to execute query: " + query + ". Error: " + e.getMessage());
                return false;
            }

            return true;
        }

        return false;
    }

    public boolean InsertUser(String firstName, String lastName, String email, String password)
    {
        String newBook = "INSERT INTO " + TABLE2 + " (" + UFNAME + ", " + ULNAME + ", " + UEMAIL + ", " + UPASSWORD + ") VALUES (?, ?, ?, ?)";
        if (ConnectToUsersDB()) {
            try {
                PreparedStatement stmt = conn.prepareStatement(newBook);
                stmt.setString(1, firstName);
                stmt.setString(2, lastName);
                stmt.setString(3, email);
                stmt.setString(4, password);
                stmt.executeUpdate();
                stmt.close();
                conn.close();
            }
            catch (Exception e)
            {
                //Log.e(TAG, "Unable to insert data. Error: " + e.getMessage());
                return false;
            }
            return true;
        }
        return false;
    }

    public ArrayList<User> GetUsers() {
        ArrayList<User> users = new ArrayList<User>();
        String getBooks = "SELECT * FROM users;";

        if (ConnectToUsersDB()) {
            try {
                Statement stmt = conn.createStatement();
                ResultSet rs = stmt.executeQuery(getBooks);

                while (rs.next()) {
                    User user = new User(rs.getInt(UID),
                            rs.getString(UFNAME),
                            rs.getString(ULNAME),
                            rs.getString(UEMAIL),
                            rs.getString(UPASSWORD));
                    //Log.i(TAG, user.getFirstName());
                    users.add(user);
                }

                stmt.close();

            } catch (Exception e) {
                //Log.e(TAG, "Unable to get users. Error: " + e.getMessage());
                return null;
            }
        }

        return users;
    }
}